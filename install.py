import cx_Oracle
from configparser import ConfigParser

# Função para carregar as configurações
def carregar_configuracoes():
    config = ConfigParser()
    try:
        # Tente ler o arquivo de configuração, ajuste o caminho se necessário
        config.read('config/config.cfg')  # Caminho relativo ou absoluto, conforme necessário
        return config
    except Exception as e:
        print(f"Erro ao carregar o arquivo de configuração: {e}")
        return None

# Função para conectar ao banco de dados Oracle
def conectar_banco():
    # Carregar configurações do arquivo
    config = carregar_configuracoes()

    if config is None:
        print("Erro: Não foi possível carregar as configurações.")
        return None

    try:
        # Ler as configurações do arquivo de configuração
        host = config['Database']['host']
        port = config['Database']['port']
        service_name = config['Database']['service_name']
        user = config['Database']['user']
        password = config['Database']['password']

        # Criar o Data Source Name (DSN)
        dsn_tns = cx_Oracle.makedsn(host, port, service_name=service_name)

        # Estabelecer conexão
        conn = cx_Oracle.connect(user=user, password=password, dsn=dsn_tns)
        print("Conexão com o banco de dados estabelecida com sucesso!")
        return conn

    except cx_Oracle.DatabaseError as e:
        print(f"Erro ao conectar ao banco de dados: {e}")
        return None

# Função para criar a tabela sensor_data
def criar_tabelas(conn):
    cursor = conn.cursor()

    # Tabela SENSOR_DATA
    cursor.execute("""
        CREATE TABLE SENSOR_DATA 
        (
            ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE NOKEEP NOSCALE NOT NULL ENABLE,
            READING_DATE DATE NOT NULL ENABLE, 
            TEMPERATURE NUMBER(5,2), 
            HUMIDITY NUMBER(5,2), 
            PH_VALUE NUMBER(5,2), 
            BUTTON_P_PRESSED NUMBER(1), 
            BUTTON_K_PRESSED NUMBER(1), 
            PRIMARY KEY (ID),
            CONSTRAINT UNQ_READING_DATE UNIQUE (READING_DATE)
        ) SEGMENT CREATION IMMEDIATE 
        PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
    """)

    # Tabela CONDICOES_CLIMATICAS
    cursor.execute("""
        CREATE TABLE CONDICOES_CLIMATICAS 
        (
            ID_CLIMA NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE NOKEEP NOSCALE NOT NULL ENABLE,
            DATA_COLETA DATE NOT NULL ENABLE, 
            TEMPERATURA NUMBER(5,2) NOT NULL ENABLE, 
            CLIMA VARCHAR2(50) NOT NULL ENABLE, 
            UMIDADE NUMBER(5,2) NOT NULL ENABLE, 
            PRIMARY KEY (ID_CLIMA),
            CONSTRAINT UNQ_DATA_COLETA UNIQUE (DATA_COLETA)
        ) SEGMENT CREATION IMMEDIATE 
        PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
    """)

    print("Tabelas criadas com sucesso.")

if __name__ == "__main__":
    conn = conectar_banco()
    if conn:
        criar_tabelas(conn)
        conn.close()
